### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

scalar DateTime


type User {
    email: String!
    id: Int!
    name: String!
    phone: String!
    avatar: String
}

type Currency {
    code: String!
    id: Int!
    name: String!
    symbol: String!
}

type Record {
    id: Int!
    money: Float!
    remark: String
    date: String!
    categoryName:String!
    accountName:String!
    type:String!

    userId: Int!
    accountId: Int!
    categoryId: Int!

    user: User!
    account: Account!
    category: Category!
}

type Category {
    id: Int!
    nums: Int!
    type: String!
    name: String!

    userId: Int!
    user: User!
    recordList:[Record]!
}

type Account {
    id: Int!
    expenses: String!
    incomes: String!
    initialAmount: String!
    isDefault: Int!
    name: String!
    currencyName: String!
    currencyCode:String!
    currencySymbol: String!

    userId: Int!
    currencyId: Int!

    user: User!
    currency: Currency!
    recordList:[Record]!
}




# 查询记录
input QuerRecord {
    pageNum:Int,
    pageSize: Int,
    categoryId: Int,
    year:Int,
    month:Int,
    day:Int,
    accountId:Int,
    type:String,
}


type Query {
    account(id: Int!): Account
    accountList: [Account!]!
    category(id: Int!): Category
    categoryList(type: String!): [Category!]!
    currency(id: Int!): Currency
    currencyList: [Currency!]!
    record(id: Int!): Record
    recordList(param: QuerRecord): [Record!]!
    user: User!
}


type UpdateResult {
    ok: Boolean!
}

type DeleteResult {
    ok: Boolean!
}

type CreateResult {
    id: Int!
}

type Mutation {
    createAccount(data: AccountAddAndUpdateInput!): CreateResult!
    createCategory(data: CategoryCreateInput!): CreateResult!
    createRecord(data: RecordAddAndUpdateInput!): CreateResult!

    deleteAccount(id: Int!): DeleteResult!
    deleteCategory(id: Int!): DeleteResult!
    deleteRecord(id: Int!): DeleteResult!

    updateAccount(id: Int!, param: AccountAddAndUpdateInput!): UpdateResult!
    updateCategory(id: Int!, name: String!): UpdateResult!
    updateRecord(id: Int!, param: RecordAddAndUpdateInput!): UpdateResult!

    updateUserName(name: String!):UpdateResult!
}

# 新增账户
input AccountAddAndUpdateInput {
    currencyId: Int!
    initialAmount: Float!
    isDefault: Boolean!
    name: String!
}

# 新增类别
input CategoryCreateInput {
    type: String!
    name: String!
}

# 新增记录
input RecordAddAndUpdateInput {
    accountId: Int!
    categoryId: Int!
    money: Float!
    type: String!
    remark: String
    date: String!
}

